#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of shell archive."
# Contents:  adaptive_model.c arithmetic_coding.h arithmetic_decode.c
#   arithmetic_encode.c decode.c encode.c makefile model.h
# Wrapped by ian@cpsc.ucalgary.ca on Tue May 14 22:07:06 1991
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'adaptive_model.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'adaptive_model.c'\"
else
echo shar: Extracting \"'adaptive_model.c'\" \(2308 characters\)
sed "s/^X//" >'adaptive_model.c' <<'END_OF_FILE'
X/* THE ADAPTIVE SOURCE MODEL */
X
X/* (C) Copyright 1987, Radford Neal. 
X
X   Permission is granted to use this program for research purposes. Please
X   note that this code was written to provide performance figures. I am
X   well aware that it is not documented to the standards of production
X   code. You're on your own. */
X
X
X#include "model.h"
X
Xint freq[No_of_symbols+1];	/* Symbol frequencies                     */
X
X
X/* INITIALIZE THE MODEL. */
X
Xstart_model()
X{   register int i;
X    for (i = 0; i<No_of_chars; i++) {		/* Set up tables that       */
X        char_to_index[i] = i+1;			/* translate between symbol */
X        index_to_char[i+1] = i;			/* indexes and characters.  */
X    }
X    for (i = 0; i<=No_of_symbols; i++) {	/* Set up initial frequency */
X        freq[i] = 1;				/* counts to be one for all */
X        cum_freq[i] = No_of_symbols-i;		/* symbols.                 */
X    }
X    freq[0] = 0;				/* Freq[0] must not be the  */
X}						/* same as freq[1].         */
X
X
X/* UPDATE THE MODEL TO ACCOUNT FOR A NEW SYMBOL. */
X
Xupdate_model(symbol)
X    register int symbol;	/* Index of new symbol                      */
X{   register int i;		/* New index for symbol                     */
X    if (cum_freq[0]==Max_frequency) {		/* See if frequency counts  */
X        int cum;				/* are at their maximum.    */
X        cum = 0;
X        for (i = No_of_symbols; i>=0; i--) {	/* If so, halve all the     */
X            freq[i] = (freq[i]+1)/2;		/* counts (keeping them     */
X            cum_freq[i] = cum; 			/* non-zero).               */
X            cum += freq[i];
X        }
X    }
X    for (i = symbol; freq[i]==freq[i-1]; i--) ;	/* Find symbol's new index. */
X    if (i<symbol) {
X        int ch_i, ch_symbol;
X        ch_i = index_to_char[i];		/* Update the translation   */
X        ch_symbol = index_to_char[symbol];	/* tables if the symbol has */
X        index_to_char[i] = ch_symbol;           /* moved.                   */
X        index_to_char[symbol] = ch_i;
X        char_to_index[ch_i] = symbol;
X        char_to_index[ch_symbol] = i;
X    }
X    freq[i] += 1;				/* Increment the frequency  */
X    { register int *p;				/* count for the symbol and */
X      p = &cum_freq[i];				/* update the cumulative    */
X      do { *--p += 1; } while (p>&cum_freq[0]);	/* frequencies.             */
X    }
X}
END_OF_FILE
if test 2308 -ne `wc -c <'adaptive_model.c'`; then
    echo shar: \"'adaptive_model.c'\" unpacked with wrong size!
fi
# end of 'adaptive_model.c'
fi
if test -f 'arithmetic_coding.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'arithmetic_coding.h'\"
else
echo shar: Extracting \"'arithmetic_coding.h'\" \(876 characters\)
sed "s/^X//" >'arithmetic_coding.h' <<'END_OF_FILE'
X/* DECLARATIONS USED FOR ARITHMETIC ENCODING AND DECODING */
X
X/* (C) Copyright 1987, Radford Neal. 
X
X   Permission is granted to use this program for research purposes. Please
X   note that this code was written to provide performance figures. I am
X   well aware that it is not documented to the standards of production
X   code. You're on your own. */
X
X
X/* SIZE OF ARITHMETIC CODE VALUES. */
X
X#define Code_value_bits 16		/* Number of bits in a code value   */
Xtypedef long code_value;		/* Type of an arithmetic code value */
X
X#define Top_value (((long)1<<Code_value_bits)-1)      /* Largest code value */
X
X
X/* HALF AND QUARTER POINTS IN THE CODE VALUE RANGE. */
X
X#define First_qtr (Top_value/4+1)	/* Point after first quarter        */
X#define Half	  (2*First_qtr)		/* Point after first half           */
X#define Third_qtr (3*First_qtr)		/* Point after third quarter        */
END_OF_FILE
if test 876 -ne `wc -c <'arithmetic_coding.h'`; then
    echo shar: \"'arithmetic_coding.h'\" unpacked with wrong size!
fi
# end of 'arithmetic_coding.h'
fi
if test -f 'arithmetic_decode.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'arithmetic_decode.c'\"
else
echo shar: Extracting \"'arithmetic_decode.c'\" \(3594 characters\)
sed "s/^X//" >'arithmetic_decode.c' <<'END_OF_FILE'
X/* ARITHMETIC DECODING ALGORITHM. */
X
X/* (C) Copyright 1987, Radford Neal. 
X
X   Permission is granted to use this program for research purposes. Please
X   note that this code was written to provide performance figures. I am
X   well aware that it is not documented to the standards of production
X   code. You're on your own. */
X
X
X#include "arithmetic_coding.h"
X#include <stdio.h>
X
X
X/* THE BIT BUFFER. */
X
Xstatic int S_buffer;		/* Bits waiting to be input                 */
Xstatic int S_bits_to_go;	/* Number of bits still in buffer           */
X
X
X/* INITIALIZE BIT INPUT. */
X
Xstart_inputing_bits()
X{   S_bits_to_go = 0;				/* Buffer starts out with   */
X}						/* no bits in it.           */
X
X
X/* INPUT A BIT. */
X
X#define add_input_bit(v) do \
X{   bits_to_go -= 1; \
X    if (bits_to_go<0) { \
X        buffer = getc(stdin); \
X        bits_to_go = 7; \
X    } \
X    v += buffer&1; \
X    buffer >>= 1; \
X} while (0)
X
X
X/* CURRENT STATE OF THE DECODING. */
X
Xstatic code_value S_value;	/* Currently-seen code value                */
Xstatic code_value S_low, S_high;/* Ends of current code region              */
X
X
X/* START DECODING A STREAM OF SYMBOLS. */
X
Xstart_decoding()
X{   register int i;
X    register int buffer, bits_to_go;
X    buffer = S_buffer; bits_to_go = S_bits_to_go;
X    S_value = 0;				/* Input bits to fill the   */
X    for (i = 1; i<=Code_value_bits; i++) {	/* code value.              */
X        S_value += S_value; add_input_bit(S_value);
X    }
X    S_low = 0;					/* Full code range.         */
X    S_high = Top_value;
X    S_buffer = buffer; S_bits_to_go = bits_to_go;
X}
X
X
X/* DECODE THE NEXT SYMBOL. */
X
Xint decode_symbol(P_cum_freq)
X    int P_cum_freq[];		/* Cumulative symbol frequencies            */
X{   int symbol;	
X    register code_value low, high, value;
X    low = S_low; high = S_high; value = S_value;
X    {   register int *cum_freq;
X        register int cum;
X        register int *p;			
X        long range;
X        cum_freq = P_cum_freq;
X        range = (long)(high-low)+1;
X        cum = 					/* Find cum freq for value. */
X          (((long)(value-low)+1)*cum_freq[0]-1)/range;
X        p = &cum_freq[1];			/* Then find symbol.        */
X        while (*p++>cum) ;
X        symbol = p-&cum_freq[1];
X        high = low +				/* Narrow the code region   */
X          (range*cum_freq[symbol-1])/cum_freq[0]-1;/* to that allotted to   */
X        low = low + 				/* tis symbol.              */
X          (range*cum_freq[symbol])/cum_freq[0];
X    }
X    {   register int H;
X        register int buffer, bits_to_go;
X        buffer = S_buffer; bits_to_go = S_bits_to_go;
X        H = Half;
X        for (;;) {				/* Loop to get rid of bits. */
X            if (high<H) {
X                /* nothing */			/* Expand low half.         */
X            } 
X            else if (low>=H) {			/* Expand high half.        */
X                value -= H;
X                low -= H;			/* Subtract offset to top.  */
X                high -= H;
X            }
X            else if (low>=First_qtr		/* Expand middle half.      */
X                  && high<Third_qtr) {
X                value -= First_qtr;
X                low -= First_qtr;		/* Subtract offset to middle*/
X                high -= First_qtr;
X            }
X            else break;				/* Otherwise exit loop.     */
X            low += low;
X            high += high; high += 1;		/* Scale up code range.     */
X            value += value;			/* Move in next input bit.  */
X            add_input_bit(value);
X        }
X        S_buffer = buffer; S_bits_to_go = bits_to_go;
X    }
X    S_low = low; S_high = high; S_value = value;
X    return symbol;
X}
END_OF_FILE
if test 3594 -ne `wc -c <'arithmetic_decode.c'`; then
    echo shar: \"'arithmetic_decode.c'\" unpacked with wrong size!
fi
# end of 'arithmetic_decode.c'
fi
if test -f 'arithmetic_encode.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'arithmetic_encode.c'\"
else
echo shar: Extracting \"'arithmetic_encode.c'\" \(4108 characters\)
sed "s/^X//" >'arithmetic_encode.c' <<'END_OF_FILE'
X/* ARITHMETIC ENCODING ALGORITHM. */
X
X/* (C) Copyright 1987, Radford Neal. 
X
X   Permission is granted to use this program for research purposes. Please
X   note that this code was written to provide performance figures. I am
X   well aware that it is not documented to the standards of production
X   code. You're on your own. */
X
X
X#include "arithmetic_coding.h"
X#include <stdio.h>
X
X
X/* THE BIT BUFFER. */
X
Xstatic int S_buffer;		/* Bits buffered for output                 */
Xstatic int S_bits_to_go;	/* Number of bits free in buffer            */
X
X
X/* INITIALIZE FOR BIT OUTPUT. */
X
Xstart_outputing_bits()
X{   S_buffer = 0;				/* Buffer is empty to start */
X    S_bits_to_go= 8;				/* with.                    */
X}
X
X
X/* OUTPUT A BIT. */
X
X#define output_bit(bit) do \
X{   buffer >>= 1; if (bit) buffer |= 0x80; \
X    bits_to_go -= 1; \
X    if (bits_to_go==0) { \
X        putc(buffer,stdout); \
X        bits_to_go = 8; \
X    } \
X} while (0)
X
X
X/* FLUSH OUT THE LAST BITS. */
X
Xdone_outputing_bits()
X{   putc(S_buffer>>S_bits_to_go,stdout);
X}
X
X
X/* OUTPUT BITS PLUS FOLLOWING OPPOSITE BITS. */
X
X#define bit_plus_follow(bit) do \
X{   output_bit(bit); \
X    while (bits_to_follow>0) { \
X        output_bit(!bit); \
X        bits_to_follow -= 1; \
X    } \
X} while(0)
X
X
X/* CURRENT STATE OF THE ENCODING. */
X
Xstatic code_value S_low, S_high;/* Ends of the current code region          */
Xstatic long S_bits_to_follow;	/* Number of opposite bits to output after  */
X				/* the next bit.                            */
X
X
X/* START ENCODING A STREAM OF SYMBOLS. */
X
Xstart_encoding()
X{   S_low = 0;					/* Full code range.         */
X    S_high = Top_value;
X    S_bits_to_follow = 0;			/* No bits to follow next.  */
X}
X
X
X/* ENCODE A SYMBOL. */
X
Xencode_symbol(symbol,P_cum_freq)
X    int symbol;			/* Symbol to encode                         */
X    int P_cum_freq[];		/* Cumulative symbol frequencies            */
X{   register code_value low, high;
X    {   register long range;
X        register int *cum_freq;
X        cum_freq = P_cum_freq;
X        range = (long)(S_high-S_low)+1;
X        high = S_low +				/* Narrow the code region   */
X          (range*cum_freq[symbol-1])/cum_freq[0]-1;/* to that allotted to   */
X        low = S_low + 				/* this symbol.             */
X        (range*cum_freq[symbol])/cum_freq[0];
X    }
X    {   register int H;
X        register long bits_to_follow;
X        register int buffer, bits_to_go;
X        H = Half;
X        bits_to_follow = S_bits_to_follow;
X        buffer = S_buffer; bits_to_go = S_bits_to_go;
X        for (;;) {				/* Loop to output bits.     */
X            if (high<H) {
X                bit_plus_follow(0);		/* Output 0 if in low half. */
X            } 
X            else if (low>=H) {			/* Output 1 if in high half.*/
X                bit_plus_follow(1);
X                low -= H;
X                high -= H;			/* Subtract offset to top.  */
X            }
X            else if (low>=First_qtr		/* Output an opposite bit   */
X                  && high<Third_qtr) {		/* later if in middle half. */
X                bits_to_follow += 1;
X                low -= First_qtr;		/* Subtract offset to middle*/
X                high -= First_qtr;
X            }
X            else break;				/* Otherwise exit loop.     */
X            low += low;
X            high += high; high += 1;		/* Scale up code range.     */
X        }
X        S_bits_to_follow = bits_to_follow;
X        S_buffer = buffer; S_bits_to_go = bits_to_go;
X    }
X    S_low = low; S_high = high; 
X}
X
X
X/* FINISH ENCODING THE STREAM. */
X
Xdone_encoding()
X{   register code_value low, high;
X    register long bits_to_follow;
X    register int buffer, bits_to_go;
X    low = S_low; high = S_high; 
X    bits_to_follow = S_bits_to_follow;
X    buffer = S_buffer; bits_to_go = S_bits_to_go;
X    bits_to_follow += 1;			/* Output two bits that     */
X    if (S_low<First_qtr) bit_plus_follow(0);	/* select the quarter that  */
X    else bit_plus_follow(1);			/* the current code range   */
X    S_low = low; S_high = high; 		/* contains.                */
X    S_bits_to_follow = bits_to_follow;
X    S_buffer = buffer; S_bits_to_go = bits_to_go;
X}
END_OF_FILE
if test 4108 -ne `wc -c <'arithmetic_encode.c'`; then
    echo shar: \"'arithmetic_encode.c'\" unpacked with wrong size!
fi
# end of 'arithmetic_encode.c'
fi
if test -f 'decode.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'decode.c'\"
else
echo shar: Extracting \"'decode.c'\" \(923 characters\)
sed "s/^X//" >'decode.c' <<'END_OF_FILE'
X/* MAIN PROGRAM FOR DECODING. */
X
X/* (C) Copyright 1987, Radford Neal. 
X
X   Permission is granted to use this program for research purposes. Please
X   note that this code was written to provide performance figures. I am
X   well aware that it is not documented to the standards of production
X   code. You're on your own. */
X
X
X#include <stdio.h>
X#include "model.h"
X
Xmain()
X{   start_model();				/* Set up other modules.    */
X    start_inputing_bits();
X    start_decoding();
X    for (;;) {					/* Loop through characters. */
X        register int ch; register int symbol;
X        symbol = decode_symbol(cum_freq);	/* Decode next symbol.      */
X        if (symbol==EOF_symbol) break;		/* Exit loop if EOF symbol. */
X        ch = index_to_char[symbol];		/* Translate to a character.*/
X        putc(ch,stdout);			/* Write that character.    */
X        update_model(symbol);			/* Update the model.        */
X    }
X    exit(0);
X}
END_OF_FILE
if test 923 -ne `wc -c <'decode.c'`; then
    echo shar: \"'decode.c'\" unpacked with wrong size!
fi
# end of 'decode.c'
fi
if test -f 'encode.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'encode.c'\"
else
echo shar: Extracting \"'encode.c'\" \(1068 characters\)
sed "s/^X//" >'encode.c' <<'END_OF_FILE'
X/* MAIN PROGRAM FOR ENCODING. */
X
X/* (C) Copyright 1987, Radford Neal. 
X
X   Permission is granted to use this program for research purposes. Please
X   note that this code was written to provide performance figures. I am
X   well aware that it is not documented to the standards of production
X   code. You're on your own. */
X
X
X#include <stdio.h>
X#include "model.h"
X
Xmain()
X{   start_model();				/* Set up other modules.    */
X    start_outputing_bits();
X    start_encoding();
X    for (;;) {					/* Loop through characters. */
X        register int ch; register int symbol;
X        ch = getc(stdin);			/* Read the next character. */
X        if (ch==EOF) break;			/* Exit loop on end-of-file.*/
X        symbol = char_to_index[ch];		/* Translate to an index.   */
X        encode_symbol(symbol,cum_freq);		/* Encode that symbol.      */
X        update_model(symbol);			/* Update the model.        */
X    }
X    encode_symbol(EOF_symbol,cum_freq);		/* Encode the EOF symbol.   */
X    done_encoding();				/* Send the last few bits.  */
X    done_outputing_bits();
X    exit(0);
X}
END_OF_FILE
if test 1068 -ne `wc -c <'encode.c'`; then
    echo shar: \"'encode.c'\" unpacked with wrong size!
fi
# end of 'encode.c'
fi
if test -f 'makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'makefile'\"
else
echo shar: Extracting \"'makefile'\" \(701 characters\)
sed "s/^X//" >'makefile' <<'END_OF_FILE'
XCFLAGS = -O
X
Xadaptive:		adaptive_encode adaptive_decode
X
Xjust_model:		just_model.o adaptive_model.o
X			cc just_model.o adaptive_model.o -o just_model
X
Xadaptive_encode:	encode.o adaptive_model.o \
X			  arithmetic_encode.o
X			cc encode.o adaptive_model.o \
X			  arithmetic_encode.o -o adaptive_encode
X
Xadaptive_decode:	decode.o adaptive_model.o \
X			  arithmetic_decode.o
X			cc decode.o adaptive_model.o \
X			  arithmetic_decode.o -o adaptive_decode
X
Xencode.o:		encode.c model.h
Xdecode.o:		decode.c model.h
X
Xadaptive_model.o:	adaptive_model.c model.h
X
Xarithmetic_encode.o:	arithmetic_encode.c arithmetic_coding.h
Xarithmetic_decode.o:	arithmetic_decode.c arithmetic_coding.h
X
Xjust_model.o:		just_model.c
END_OF_FILE
if test 701 -ne `wc -c <'makefile'`; then
    echo shar: \"'makefile'\" unpacked with wrong size!
fi
# end of 'makefile'
fi
if test -f 'model.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'model.h'\"
else
echo shar: Extracting \"'model.h'\" \(982 characters\)
sed "s/^X//" >'model.h' <<'END_OF_FILE'
X/* INTERFACE TO THE MODEL. */
X
X/* (C) Copyright 1987, Radford Neal. 
X
X   Permission is granted to use this program for research purposes. Please
X   note that this code was written to provide performance figures. I am
X   well aware that it is not documented to the standards of production
X   code. You're on your own. */
X
X
X
X/* THE SET OF SYMBOLS THAT MAY BE ENCODED. */
X
X#define No_of_chars 256			/* Number of character symbols      */
X#define EOF_symbol (No_of_chars+1)	/* Index of EOF symbol              */
X
X#define No_of_symbols (No_of_chars+1)	/* Total number of symbols          */
X
X
X/* TRANSLATION TABLES BETWEEN CHARACTERS AND SYMBOL INDEXES. */
X
Xint char_to_index[No_of_chars];		/* To index from character          */
Xunsigned char index_to_char[No_of_symbols+1]; /* To character from index    */
X
X
X/* CUMULATIVE FREQUENCY TABLE. */
X
X#define Max_frequency 16383		/* Maximum allowed frequency count  */
X
Xint cum_freq[No_of_symbols+1];		/* Cumulative symbol frequencies    */
END_OF_FILE
if test 982 -ne `wc -c <'model.h'`; then
    echo shar: \"'model.h'\" unpacked with wrong size!
fi
# end of 'model.h'
fi
echo shar: End of shell archive.
exit 0
